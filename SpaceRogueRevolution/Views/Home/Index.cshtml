@{
    ViewBag.Title = "Index";
}
<script src="~/Scripts/jquery-1.8.2.js"></script>

<div id="canvasContainer">

    <canvas onmousedown="" id="canvas" height="400" width="800" style="position:absolute;top:0px;left:0px" ></canvas>
    
</div>
<div id ="message" style="position:absolute;top:420px;left:0px" ></div>
<div id ="display" style="position:absolute;top:450px;left:0px" ></div>
<script type="text/javascript">
    $(document).ready(function()
    {
     

        var clickCount = 0;
        var gameData;
        var jobs;

        var drawScreen = function () {
            var loadedImages = 0;
            var images = [];
            var ctx = document.getElementById('canvas').getContext('2d');
            ctx.fillStyle = "rgba(0, 0, 56, 70)";
            ctx.fillRect(0, 0, 500, 500);
            var draw = function () {
                for (i = 0; i < gameData.map.length; i++) {
                    var item = gameData.map[i];
                    ctx.drawImage(images[i], item.col, item.row, 20, 20);
                };
            };

            for (i = 0; i < gameData.map.length; i++) {
                var image = new Image();
                var item = gameData.map[i];
                image.addEventListener("load", function () {
                    loadedImages++;
                    if (loadedImages == gameData.map.length) {
                        draw();
                    }
                }, false);
                image.src = item.FileName;
                images.push(image);
            }
        };

   

        var syncServer = function () {
            var mapObject = null;
            if (gameData != null)
                mapObject = { map: gameData.map };
            $.ajax({
                type: "POST",
                url: '@Url.Action("Sync","Home")',
                data: JSON.stringify(mapObject),
                contentType: 'application/json',
                success: function (data) {
                    gameData = data;
                    var playerSpaceShip = data.playerSpaceShip;

                    drawScreen();
                }
            });
        };

        var sendCommandToServer = function (command) {
            commandObject = { command : command };
            $.ajax({
                type: "POST",
                url: '@Url.Action("TakeAction","Home")',
                data: JSON.stringify(commandObject),
                contentType: 'application/json',
                success: function (data) {
                    gameData = data;
                    var playerSpaceShip = data.playerSpaceShip;
                    drawScreen();
                }
            });
        };

        var sendDockingCommandToServer = function (id) {
            commandObject = { planet: id };
            $.ajax({
                type: "POST",
                url: '@Url.Action("Docking","Home")',
                data: JSON.stringify(commandObject),
                contentType: 'application/json',
                success: function (data) {
                    gameData = data;
                    for (var i = 0; i < data.length; i++) {
                        $('#message').append(i, "<div>" + data[i] + "</div>");
                    }
                     
                }
            });
        };

        var getKeyBoardAction = function (evt) {
            var playerSpaceShip = gameData.map[0];
            switch (evt.keyCode) {
                case 37:
                    if (playerSpaceShip.col - 5)
                        gameData.map[10].col -= 5;
                    break;
                case 38:
                    if (playerSpaceShip.row - 5)
                        gameData.map[10].row -= 5;
                    break;
                case 39:
                    if (playerSpaceShip.col + 5 < 400)
                        gameData.map[10].col += 5;
                    break;
                case 40:
                    if (playerSpaceShip.row + 5 < 400)
                        gameData.map[10].row += 5;
                    break;
                default:
                    sendCommandToServer(evt.keyCode);
                    break;
            }
            //check for dock
            var docked = false;
            for (var i = 0; i < gameData.map.length-1; i++) {
                if (intersect(gameData.map[i].col, gameData.map[i].row, gameData.map[10].col, gameData.map[10].row)) {
                    
                    $("#display").text('Docking');
                    sendDockingCommandToServer(gameData.map[i].ID);
                }
            }
            
        };


        var doKeyDown = function (evt) {
            
            var command = new String();
            getKeyBoardAction(evt);
            drawScreen();
            if (clickCount++ > 5) {
                syncServer(gameData.map,evt.keyCode);
                clickCount = 0;
            }
        };

        var intersect = function (firstX, firstY, secondX, secondY)
        {
            if (firstX == secondX && firstY == secondY)
                return true;

            if ((Math.abs(firstX - secondX)  <=10) && (Math.abs(firstY - secondY)<=10))
                return true;

            return false;
        };

        var action = "";
        window.addEventListener('keydown', doKeyDown, true);
        

        $("#canvas").mousedown(function (e) {
            var fixedX = e.clientX - 8;
            var fixedY = e.clientY - 9;
            //determine any intersections
            for(var i=0;i<gameData.map.length;i++)
            {
                if (intersect(gameData.map[i].col, gameData.map[i].row, fixedX, fixedY)) {
                    $("#display").text(gameData.map[i].Description);
                }
            }
            $("#message").text("clicked: " + fixedX + ":" + fixedY);
        });
        syncServer();
    });
</script>



