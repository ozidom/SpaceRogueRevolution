@{
    ViewBag.Title = "Index";
}
<script src="~/Scripts/jquery-1.8.2.js"></script>
<script src="~/Scripts/jquery-ui-1.9.2.js"></script>

<div id="canvasContainer">
    <canvas  height="500" width="500" id="canvas" class="canvas" ></canvas>
</div>
<div id ="message" style="position:absolute;top:420px;left:0px" ></div>
<div id ="display" style="position:absolute;top:450px;left:0px" ></div>
<div id ="titleDiv"class="titleDiv" >
    Space Rogue Revolution -the big jobs
</div>


<div id ="serverprocessingdisplay" class="serverprocessingdisplay"  >Contacting Server...</div>

<div id="dialog" class="IntroGameDiv">
    <div>
         @SpaceRogueRevolution.GameResource.IntroGameText
    </div>
    <div style="position:absolute;vertical-align:bottom">   
        <input type="button" value="Continue" onclick="$('#dialog').hide(1000);" />
    </div> 
</div>
<div id="gameWinScreen" class="GameOverDiv">
    <div>
          @SpaceRogueRevolution.GameResource.GameWinText
    </div>
    <div style="position:absolute;vertical-align:bottom">   
        <input type="button" value="OK" onclick="location.reload(true);" />
    </div> 
</div>
<div id="gameLooseScreen" class="GameOverDiv">
    <div>
          @SpaceRogueRevolution.GameResource.GameLooseText
    </div>
    <div style="position:absolute;vertical-align:bottom">   
        <input type="button" value="OK" onclick="location.reload(true);" />
    </div> 
</div>
<div id="HowToPlayDiv" class="HowToPlayDiv">
    <div>
        @SpaceRogueRevolution.GameResource.HelpText
    </div>
    <div style="position:absolute;vertical-align:bottom">
        <input type="button" value="Close" onclick="$('#HowToPlayDiv').hide(1000);" />
    </div> 
</div>
<div id="GameDiv" class="GameDiv" >
</div>
<div id ="menu" class="menu"  >
      <input type="button" value="?" onclick="$('#HowToPlayDiv').show(1000);" />
</div>

<script type="text/javascript">
    $(document).ready(function()
    {
        var IsServerProcessing = false;
        var currentJob = null;
        var clickCount = 0;
        var gameData;
        var jobs;
        var docked = false;
        var cash = 0;
        var jobText = "";

        var playerSpaceshipMoveDistance = 5;    //how far the spaceShip can move a turn (px)
        var galaxyWidth = 500;                  //width of galaxy in (px)
        var galaxyHeight = 500;                 //height of galaxy in (px)
        var imageHeight = 20;                   //tile image height (px)
        var imageWidth = 20;                    //tile image width (px)
        var intersectionRange = 10;             //intersection with a planet by starship is  plus or minus this
        var mouseDownXoffSet = 8;               //offset required to get an accurate X co-ord relative to the CANVAS
        var mouseDownYoffSet = 9;               //offset required to get an accurate Yco-ord relative to the CANVAS
        var GameWinMoneyAmount = 1000;

        $('#AboutDiv').hide();
        $('#HowToPlayDiv').hide();
        $('#BugsDiv').hide();
        $('#gameLooseScreen').hide();
        $('#gameWinScreen').hide();

        var drawScreen = function () {
            $('#gameDiv').show();
            var loadedImages = 0;
            var images = [];
            var ctx = document.getElementById('canvas').getContext('2d');
            ctx.fillStyle = "rgba(0,0,0,1)";
            ctx.fillRect(0, 0, galaxyHeight, galaxyWidth);
            var draw = function () {
                for (i = 0; i < gameData.length; i++) {
                    var item = gameData[i];
                    ctx.drawImage(images[i], item.col, item.row,imageWidth,imageHeight);
                };
            };

            for (i = 0; i < gameData.length; i++) {
                var image = new Image();
                var item = gameData[i];
                image.addEventListener("load", function () {
                    loadedImages++;
                    if (loadedImages == gameData.length) {
             
                        draw();
                    }
                }, false);
                image.src = item.FileName;
                images.push(image);
            }
        };

        //SYNC PROCESS SERVER RESPONSE METHOD
        var processSyncData = function (data) {
            gameData = data;
        
           
         
            $('#serverprocessingdisplay').hide(1000);
            IsServerProcessing = false;
            drawScreen();
        };

        //JOB REQUEST SERVER RESPONSE METHOD
        var processJobData = function (data) {
            jobs = data;
            $('#GameDiv').text('');
            $('#GameDiv').append("<div><b>Jobs</b></div>");
            $('#GameDiv').show(1000);
            for (var i = 0; i < data.length; i++) {
                var planet = getPlanetByID(jobs[i].DestinationID);
                if (planet != null) {
                    $('#serverprocessingdisplay').hide(1000);
                    IsServerProcessing = false;

                    jobString = jobs[i].Description + ":" + planet.Description;
                    
                    $('#GameDiv').append("<div> ID: " + i + " -" + jobString + "</div>");
                }
            }
        };

        var callServer = function (id, route, successFunction, commandObject) {
            $('#serverprocessingdisplay').show(10);
            IsServerProcessing = true;
            $.ajax({
                type: "POST",
                url: route,
                data: JSON.stringify(commandObject),
                contentType: 'application/json',
                success: successFunction
            });
        };

        var getPlanetByID = function (id) {
            for (var i = 0; i < gameData.length - 1; i++) {
                if (gameData[i].ID == id)
                    return gameData[i];
            }
            return null;
        };

        var getPlanetByCoords = function (x,y) {
            for (var i = 0; i < gameData.length - 1; i++) {
                if (gameData[i].col == x && gameData[i].row ==y )
                    return gameData[i];
            }
            return null;
        };

        //KEYBOARD HANDLER
        var getKeyBoardAction = function (evt) {
            var playerSpaceShip = gameData[0];
            switch (evt.keyCode) {
                case 70:
                    if (!docked)
                        $('#GameDiv').text("You are not docked");
                    else
                        {
                        if (gameData[0].gameObject != null) {
                            if (gameData[0].gameObject.Money > 10) {
                                gameData[0].gameObject.CurrentFood += 100;
                                gameData[0].gameObject.Money -= gameData[0].gameObject.Money - 10;
                                $('#GameDiv').text("You bought food");
                            }
                            else
                                $('#GameDiv').text("Not enough money");
                        }

                    }
                    break;
                case 71:
                    if (!docked) {
                        $('#GameDiv').text("You are not docked");
                    }
                    else
                    if (gameData[0].gameObject != null) {
                        if (gameData[0].gameObject.Money >= 10) {
                            gameData[0].gameObject.CurrentFuel += 100;
                            gameData[0].gameObject.Money = gameData[0].gameObject.Money - 10;
                            $('#GameDiv').text("You bought fuel");
                        }
                        else 
                            $('#GameDiv').text("Not enough money");
                    }
                    break;
                case 65:
                    if (playerSpaceShip.col - playerSpaceshipMoveDistance >=0)
                        gameData[0].col -= playerSpaceshipMoveDistance;
                    break;
                case 87:
                    if (playerSpaceShip.row - playerSpaceshipMoveDistance >= 0)
                        gameData[0].row -= playerSpaceshipMoveDistance;
                    break;
                case 83:
                    if (playerSpaceShip.col + playerSpaceshipMoveDistance < galaxyWidth)
                        gameData[0].col += playerSpaceshipMoveDistance;
                    break;
                case 90:
                    if (playerSpaceShip.row + playerSpaceshipMoveDistance < galaxyWidth)
                        gameData[0].row += playerSpaceshipMoveDistance;
                    break;
                case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:
                    //jobs
                    if (docked) {
                        var index = Math.abs(48 - evt.keyCode);
                        currentJob = jobs[index];
                        jobText = "You have picked up the job " + currentJob.Description;
                    }
                    else {
                        jobText = "You are not docked";
                    }
                    $('#GameDiv').text(jobText);
                    break;
                case 74:
                    if (currentJob != null) {
                        $('#GameDiv').text(currentJob.Description);
                    }
                    else {
                        $('#GameDiv').text("You don't have a job");
                    }
                    break;
                default:
                    break;
            }
            
            var oldDockState = docked;
            var displayMessage = String();
            docked = false;
            for (var i = 1; i < gameData.length-1; i++) {
                if (intersect(gameData[i].col, gameData[i].row, gameData[0].col, gameData[0].row))
                {
                    var planet = getPlanetByCoords(gameData[i].col, gameData[i].row);
                    if (planet != null && planet.FileName != "/Content/Images/gas.png")
                    {
                        docked = true;
                        
                        var id = gameData[i].ID
                        commandObject = { planet: id }
                        if (currentJob == null)
                            callServer(id, '@Url.Action("Docking","Home")', processJobData, commandObject);
                        else {

                            var jobPlanet = getPlanetByID(currentJob.DestinationID);

                            if (jobPlanet != null && intersect(jobPlanet.col, jobPlanet.row, gameData[i].col, gameData[i].row)) {
                                cash += currentJob.Value;
                                displayMessage =  "job done you earned " + currentJob.Value;
                                gameData[0].gameObject.Money += currentJob.Value;
                                currentJob = null;
                                break;
                               
                            }
                        }
                    }
                }
            }
            $("#GameDiv").text(displayMessage);

            if (cash >= GameWinMoneyAmount) {
                $('#gameWinScreen').show(1000);
            }

            var gameObject = gameData[0].gameObject;
            if (gameObject != null) {
                if (gameObject.CurrentFuel < 0 || gameObject.CurrentFood < 0)
                    $('#gameLooseScreen').show(1000);
            }
                
            if (oldDockState == true && docked == false)
                    $("#GameDiv").text('');
            
        };


        var doKeyDown = function (evt) {
            if (!IsServerProcessing) {
                var command = new String();
                getKeyBoardAction(evt);
                drawScreen();
                if (clickCount++ > 5) {
                   
                    commandObject = { map: gameData };
                    callServer(null, '@Url.Action("Sync","Home")', processSyncData, commandObject);
                    //syncServer(gameData, evt.keyCode);
                    clickCount = 0;
                }
            }
        };

        var intersect = function (firstX, firstY, secondX, secondY)
        {
            if (firstX == secondX && firstY == secondY)
                return true;

            if ((Math.abs(firstX - secondX)  <= intersectionRange) && (Math.abs(firstY - secondY)<=intersectionRange))
                return true;

            return false;
        };

        var action = "";
        window.addEventListener('keydown', doKeyDown, true);
        

        $("#canvas").mousedown(function (e) {
            var fixedX = e.clientX - mouseDownXoffSet;
            var fixedY = e.clientY -  mouseDownYoffSet;
            //determine any intersections
            for(var i=0;i<gameData.length;i++)
            {
                if (intersect(gameData[i].col, gameData[i].row, fixedX, fixedY)) {
                    $("#GameDiv").text(gameData[i].Description);
                }
            }
            $("#message").text("clicked: " + fixedX + ":" + fixedY);
        });
        commandObject = { map: gameData };
        callServer(null, '/Home/Sync', processSyncData, commandObject);

    });
</script>



